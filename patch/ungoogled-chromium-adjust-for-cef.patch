diff --git a/patches/core/ungoogled-chromium/fix-building-without-safebrowsing.patch b/patches/core/ungoogled-chromium/fix-building-without-safebrowsing.patch
index d0b33556..01a450e3 100644
--- a/patches/core/ungoogled-chromium/fix-building-without-safebrowsing.patch
+++ b/patches/core/ungoogled-chromium/fix-building-without-safebrowsing.patch
@@ -1787,16 +1787,16 @@
    }
 --- a/chrome/browser/file_select_helper.cc
 +++ b/chrome/browser/file_select_helper.cc
-@@ -329,7 +329,7 @@ void FileSelectHelper::PerformContentAna
-   if (AbortIfWebContentsDestroyed())
-     return;
+@@ -349,7 +349,7 @@ void FileSelectHelper::PerformContentAna
+   }
+ #endif
  
 -#if BUILDFLAG(ENTERPRISE_CLOUD_CONTENT_ANALYSIS)
 +#if false
    enterprise_connectors::ContentAnalysisDelegate::Data data;
    if (enterprise_connectors::ContentAnalysisDelegate::IsEnabled(
            profile_, web_contents_->GetLastCommittedURL(), &data,
-@@ -359,7 +359,7 @@ void FileSelectHelper::PerformContentAna
+@@ -379,7 +379,7 @@ void FileSelectHelper::PerformContentAna
  #endif  // BUILDFLAG(ENTERPRISE_CLOUD_CONTENT_ANALYSIS)
  }
  
diff --git a/patches/core/ungoogled-chromium/remove-unused-preferences-fields.patch b/patches/core/ungoogled-chromium/remove-unused-preferences-fields.patch
index 2a9d57d4..e847f74e 100644
--- a/patches/core/ungoogled-chromium/remove-unused-preferences-fields.patch
+++ b/patches/core/ungoogled-chromium/remove-unused-preferences-fields.patch
@@ -6512,7 +6512,25 @@
      } else {
        SetPrimaryAccountInternal(account_info, /*consented_to_sync=*/false,
                                  scoped_pref_commit);
-@@ -539,10 +414,6 @@ void PrimaryAccountManager::SetSyncPrima
+@@ -520,17 +395,3 @@ void PrimaryAccountManager::SetSyncPrima
+   DCHECK(!HasPrimaryAccount(signin::ConsentLevel::kSync));
+ 
+-#if DCHECK_IS_ON()
+-  {
+-    std::string pref_account_id =
+-        client_->GetPrefs()->GetString(prefs::kGoogleServicesAccountId);
+-    bool consented_to_sync =
+-        client_->GetPrefs()->GetBoolean(prefs::kGoogleServicesConsentedToSync);
+-
+-    DCHECK(pref_account_id.empty() || !consented_to_sync ||
+-           pref_account_id == account_info.account_id.ToString())
+-        << "account_id=" << account_info.account_id
+-        << " pref_account_id=" << pref_account_id;
+-  }
+-#endif  // DCHECK_IS_ON()
+-
+   SetPrimaryAccountInternal(account_info, /*consented_to_sync=*/true,
+@@ -539,10 +400,6 @@ void PrimaryAccountManager::SetSyncPrima
    // Go ahead and update the last signed in account info here as well. Once a
    // user is signed in the corresponding preferences should match. Doing it here
    // as opposed to on signin allows us to catch the upgrade scenario.
@@ -6523,7 +6541,7 @@
  }
  
  void PrimaryAccountManager::SetPrimaryAccountInternal(
-@@ -554,22 +425,6 @@ void PrimaryAccountManager::SetPrimaryAc
+@@ -554,22 +411,6 @@ void PrimaryAccountManager::SetPrimaryAc
    // 'account_info' might be a reference to the contents of `primary_account_`.
    // Create a PrimaryAccount object before calling emplace to avoid crashes.
    primary_account_.emplace(PrimaryAccount(account_info, consented_to_sync));
@@ -6546,7 +6564,7 @@
  }
  
  void PrimaryAccountManager::RecordHadPreviousSyncAccount() const {
-@@ -579,7 +434,7 @@ void PrimaryAccountManager::RecordHadPre
+@@ -579,7 +420,7 @@ void PrimaryAccountManager::RecordHadPre
    }
  
    const std::string& last_gaia_id_with_sync_enabled =
@@ -6555,7 +6573,7 @@
    const bool existed_primary_account_with_sync =
        !last_gaia_id_with_sync_enabled.empty();
  
-@@ -729,38 +584,6 @@ PrimaryAccountChangeEvent::State Primary
+@@ -729,38 +570,6 @@ PrimaryAccountChangeEvent::State Primary
  void PrimaryAccountManager::ComputeExplicitBrowserSignin(
      const PrimaryAccountChangeEvent& event_details,
      ScopedPrefCommit& scoped_pref_commit) {
diff --git a/patches/extra/ungoogled-chromium/add-flag-for-incognito-themes.patch b/patches/extra/ungoogled-chromium/add-flag-for-incognito-themes.patch
index e2fc26ad..061e0687 100644
--- a/patches/extra/ungoogled-chromium/add-flag-for-incognito-themes.patch
+++ b/patches/extra/ungoogled-chromium/add-flag-for-incognito-themes.patch
@@ -1,9 +1,9 @@
 --- a/chrome/browser/ui/views/frame/browser_frame.cc
 +++ b/chrome/browser/ui/views/frame/browser_frame.cc
-@@ -637,5 +637,7 @@ bool BrowserFrame::RegenerateFrameOnThem
- }
- 
- bool BrowserFrame::IsIncognitoBrowser() const {
+@@ -681,5 +681,7 @@ bool BrowserFrame::IsIncognitoBrowser
+   if (!browser_view_) {
+     return true;
+   }
 +  if (base::CommandLine::ForCurrentProcess()->HasSwitch("enable-incognito-themes"))
 +    return false;
    return browser_view_->browser()->profile()->IsIncognitoProfile();
diff --git a/patches/extra/ungoogled-chromium/add-flag-to-hide-side-panel-button.patch b/patches/extra/ungoogled-chromium/add-flag-to-hide-side-panel-button.patch
index 440efaa2..b579ba90 100644
--- a/patches/extra/ungoogled-chromium/add-flag-to-hide-side-panel-button.patch
+++ b/patches/extra/ungoogled-chromium/add-flag-to-hide-side-panel-button.patch
@@ -1,11 +1,11 @@
 --- a/chrome/browser/ui/views/toolbar/toolbar_view.cc
 +++ b/chrome/browser/ui/views/toolbar/toolbar_view.cc
-@@ -461,7 +461,8 @@ void ToolbarView::Init() {
+@@ -480,7 +480,8 @@ void ToolbarView::Init() {
      send_tab_to_self_button_ =
          container_view_->AddChildView(std::move(send_tab_to_self_button));
  
--  if (!features::IsSidePanelPinningEnabled()) {
-+  if (!features::IsSidePanelPinningEnabled() &&
+-  if (!features::IsSidePanelPinningEnabled() && BUTTON_VISIBLE(kSidePanel)) {
++  if (!features::IsSidePanelPinningEnabled() && BUTTON_VISIBLE(kSidePanel) &&
 +      !base::CommandLine::ForCurrentProcess()->HasSwitch("hide-sidepanel-button")) {
      if (companion::IsCompanionFeatureEnabled()) {
        side_panel_container_ = container_view_->AddChildView(
diff --git a/utils/prune_binaries.py b/utils/prune_binaries.py
index 7fae643f..0cf4b080 100755
--- a/utils/prune_binaries.py
+++ b/utils/prune_binaries.py
@@ -113,10 +113,9 @@ def _callback(args):
     prune_list = tuple(filter(len, args.pruning_list.read_text(encoding=ENCODING).splitlines()))
     unremovable_files = prune_files(args.directory, prune_list)
     if unremovable_files:
-        get_logger().error('%d files could not be pruned.', len(unremovable_files))
+        get_logger().debug('%d files could not be pruned.', len(unremovable_files))
         get_logger().debug('Files could not be pruned:\n%s',
                            '\n'.join(f for f in unremovable_files))
-        sys.exit(1)
 
 
 def main():
